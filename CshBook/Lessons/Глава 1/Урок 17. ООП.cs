using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CshBook.Lessons
{
    /* Введение в ООП - Объектно-ориентированное программирование (
    Теперь перейдём к тому, ради чего тут все собрались, а именно ООП!)
     
    Для начала, нужно понять зачем вообще оно нужно. 
    Предположим, мы хотим написать простенькую игру, гед будем ухаживать за нашим питомцем.
    Для написания такой игры тебе уже хватает навыков.
    Но, что если мы хотим расширить наш штат питомцев до двух.
    Тяжеловато, но всё ещё справимся. 

    Однако, что будет, если мы захотим неограниченное количество питомцев. Звучит уже очень сложно.
    Но, это пока ты не познакомился с ООП.

    ООП позволяет описать нам какой-то объект, и использовать его сколько угодно раз.
    Давай разберём на примере 1 реализацию без ООП. Вроде кода не мало, 
    но опять же представь себе что если нам нужно много разных активностей нашему питомцу, да ещё и их будет много.
    Я вот представил и решил всё это не писать).

    Давай лучше посмотрим на второй пример и поймём как надо.
    Согласись, так в разы лучше!
    Но, в таком коде есть несколько проблем. Сейчас не будем об этом думать, главное усвоить то, что уже есть)
     */

    #region Пример 1
    class Example1
    {
        public static void Main() 
        {
            string petName = "Бобик";
            int petAge = 5;

            Play(petName);
            GettingOld(ref petAge, petName);
            GettingOld(ref petAge, petName);
        }


        static void Play(string petname)
        {
            Console.WriteLine($"{petname} играет!");
        }

        static void GettingOld(ref int petage, string petname)
        {
            petage++;

            Console.WriteLine($"{petname} постарел на 1 год(. Теперь ему {petage}");
        }
    }
    #endregion


    #region Пример 2
    class Pet // пишем что у нас будет класс - питомец. 
    {
        public string name; // поле имени питомца
        public int age; // поле возраста питомца

        public void Play() // метод для игры
        {
            Console.WriteLine($"{name} играет!");
        }

        public void GettingOld() // метод старения
        {
            age++;
            Console.WriteLine($"{name} постарел на 1 год(. Теперь ему {age}");
        }
    }
    #endregion

    internal class SeventeenthLesson
    {
        public static void Main()
        {
            // Пример 2 
            Pet pet1 = new Pet(); // тут у нас pet1 - переменная и экземпляр класса Pet.
                                  // Таких можем создавать огромное множество и работать с каждым индивидуальною.

            pet1.name = "Бобик";
            pet1.age = 5;

            Pet pet2 = new Pet();
            pet2.name = "Шарик";
            pet2.age = 2;



            pet1.Play();
            pet2.Play();

            pet1.GettingOld();
            pet2.GettingOld();
        }
    }

    /* Итог
     Как итог - теперь мы всё можем писать в разных файлах и разделять логику разных сущностей. 
     Однако, это только начало!
     
     */

    /* Задача
     Сделай поле возраста по умолчанию = 0. После каждой 10-й игры увеличивай поле на 1.
     */


    /* Творческое задание
     
     Создай класс человека - придумай что он будет делать и какие поля у него будут. Реализуй)
     */
}
