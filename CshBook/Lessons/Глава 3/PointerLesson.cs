using System;

namespace CshBook.Lessons
{
    /* Урок: Указатели в C#

    Указатели в C# — это специальные переменные, которые содержат адреса других переменных в памяти. Они позволяют работать с памятью напрямую и использовать арифметику указателей.

    Однако указатели работают только в **небезопасном коде (unsafe)**, который требует специальных разрешений. Такие возможности чаще используются в системном программировании, драйверах или при оптимизации производительности.

    ---------------------
    Основные особенности:
    ---------------------

    - Указатели могут использоваться только в контексте `unsafe`.
    - Необходима активация небезопасного кода: `unsafe` и флаг компиляции `/unsafe`.
    - Доступны операции: получение адреса (`&`), разыменование (`*`), арифметика указателей (`+`, `-`).
    - Можно использовать с простыми типами: `int*`, `char*`, `float*`, и структурами, не содержащими ссылочных типов.

    ---------------------
    Зачем нужны указатели:
    ---------------------

    - Повышение производительности при работе с большим объёмом данных.
    - Доступ к памяти на низком уровне.
    - Взаимодействие с нативным (неуправляемым) кодом (например, C/C++).
    - Написание собственных аллокаторов памяти.
    - Управление структурами в `stackalloc`.

   
    */

    internal class PointerLesson
    {
        public static unsafe void Main_()
        {
            int x = 10;
            int* p = &x;
            Console.WriteLine($"Значение x: {x}");
            Console.WriteLine($"Адрес x: {(long)p:X}");

            *p = 20;
            Console.WriteLine($"Новое значение x через указатель: {x}");

            // Пример 2: Арифметика указателей с массивом
            int[] arr = { 1, 2, 3, 4, 5 };

            fixed (int* ptr = arr)
            {
                Console.WriteLine("\nЧтение массива через указатель:");
                for (int i = 0; i < arr.Length; i++)
                {
                    Console.WriteLine($"*(ptr + {i}) = {*(ptr + i)}");
                }

                Console.WriteLine("\nИзменение массива через указатель:");
                for (int i = 0; i < arr.Length; i++)
                {
                    *(ptr + i) *= 2;
                    Console.WriteLine(arr[i]); // теперь массив: 2, 4, 6, 8, 10
                }
            }

            // Пример 3: Использование stackalloc (массив в стеке)
            Console.WriteLine("\nМассив через stackalloc:");
            int* stackArray = stackalloc int[5];
            for (int i = 0; i < 5; i++)
            {
                stackArray[i] = i * 10;
            }

            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(stackArray[i]);
            }
            
            // Пример 4: Чисто указательный массив без использования Array
            Console.WriteLine("\nУказатели без массива:");
            int a = 1, b = 2, c = 3;
            int*[] pointers = new int*[3];
            pointers[0] = &a;
            pointers[1] = &b;
            pointers[2] = &c;

            for (int i = 0; i < 3; i++)
            {
                Console.WriteLine($"Значение по указателю[{i}]: {*pointers[i]}");
            }

            // Пример 5: Арифметика указателей (прибавление/вычитание)
            int[] nums = { 100, 200, 300, 400 };
            fixed (int* pNums = nums)
            {
                int* ptr1 = pNums;
                int* ptr2 = ptr1 + 2;
                Console.WriteLine($"\nAрифметика указателей:");
                Console.WriteLine($"ptr1 -> {*(ptr1)}");
                Console.WriteLine($"ptr2 -> {*(ptr2)}"); // 300
                Console.WriteLine($"Разница между ptr2 и ptr1: {ptr2 - ptr1}"); // 2
            }


            // Пример 6: Обращение к структуре через указатель
            Point point = new Point { X = 5, Y = 10 };

            // Закрепим объект в памяти и получим указатель
            Point* pt = &point;
            
            // Используем -> для доступа к полям
            Console.WriteLine($"X = {pt-X}, Y = {pt->Y}");

            // Можно также изменять поля
            pt->X = 100;
            pt->Y = 200;

            Console.WriteLine($"После изменения: X = {pt->X}, Y = {pt->Y}");
            
        }
    }


    struct Point
    {
        public int X;
        public int Y;
    }

    /*
    ---------------------
    Основные операторы:
    ---------------------
    &: Получение адреса
    *: Разыменование указателя
    ->: Обращение к члену структуры через указатель (в `struct`)
    []: Доступ к элементу массива
    +, -: Арифметика указателей

    ---------------------
    Ограничения:
    ---------------------
    - Указатели работают только с типами-значениями (value types).
    - Нельзя использовать указатели для ссылочных типов (class, string).
    - Указатели несовместимы с управляемой средой CLR (нельзя в большинстве случаев использовать в обычных проектах без unsafe).

    ---------------------
    Атрибут fixed:
    ---------------------
    `fixed` нужен для предотвращения перемещения объекта сборщиком мусора (GC).
    Он используется для:
    - Получения адреса элемента массива.
    - Закрепления строки в памяти.

    ---------------------
    Атрибут stackalloc:
    ---------------------
    Позволяет выделить массив в стеке, а не в куче.
    Пример: `int* buffer = stackalloc int[100];`

    Используется для повышения производительности и уменьшения сборки мусора.

    ---------------------
    Когда использовать:
    ---------------------
    ✅ Оптимизация в системном или графическом коде
    ✅ Использование внешней нативной библиотеки
    ✅ Работа с небезопасной памятью или ручным управлением памятью
    ❌ Не использовать без необходимости — опасность утечек, сбоев, нарушения безопасности

    */

    /*
    ---------------------
    Задания на практику:
    ---------------------

    1. Объявите переменную `int`, получите её адрес и измените значение через указатель.
    2. Создайте массив из 5 чисел, выведите их значения через указатель.
    3. Используйте `stackalloc` для создания массива из 3 элементов и выведите их.
    4. Попробуйте с помощью арифметики указателей просуммировать значения массива.
    5. Создайте структуру `Point` с двумя полями `x` и `y`. Используйте указатель на структуру и измените координаты.
    6. Используйте `fixed` для работы с массивом символов и выведите адрес каждого символа.
    7. Попробуйте получить указатель на переменную типа `float`, увеличьте значение через `*ptr += 1.5f`.
    8. Реализуйте простой поиск максимального значения в массиве через указатели.
    9. Используйте указатель на `bool` и поэкспериментируйте с true/false.
    10. Напишите метод, принимающий указатель `int*`, и увеличивающий значение по адресу на 10.

    */
}
