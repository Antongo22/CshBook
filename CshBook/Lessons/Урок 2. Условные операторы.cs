using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CshBook.Lessons
{
    /* Теория
    Мы уже умеем писать простую программу. 
    Однако, сейчас у неё только один путь выполнения. 
    Для того, чтобы реагировать по разному на разные данные в C# есть условные операторы.
    Для корректной работы нам нужен тип данных bool.

    Для условных операторов используются ключевые слова "if" и "else".
    Вот как выглядит конструкция -

    if (<bool (условие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else 
    {
        #Логика выполнения если условие равнялось false#
    }

    ВАЖНО!, что else относится только к последнему if, где else идёт сразу после него. 

    else является необязательной конструкцией, те мы можем сделать так - 

    if (<bool (условие1)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    if (<bool (условие2)>)
    {
        #Логика выполнения если условие равнялось true#
    }

    и может быть такое, что выполниться только одно из if, или оба, или вообще не одно
    

    Для того, чтобы связать несколько if с одним else есть такая конструкция:

    if (<bool (условие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else 
    {
         if (<bool (ПОДусловие)>)
        {
            #Логика выполнения если условие равнялось true#
        }
        else 
        {
             if (<bool (ПОДПОДусловие)>)
            {
                #Логика выполнения если условие равнялось true#
            }
            else 
            {
                #Логика выполнения если условие равнялось false#
            }
        }
    }

    неудобно, поэтому можно совместить else и if для более удобной записи. Вот пример, логически аналогичный прошлому - 
    
    if (<bool (условие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else if (<bool (ПОДусловие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else if (<bool (ПОДПОДусловие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else 
    {
        #Логика выполнения если условие равнялось false#
    }    
    
    Так намного лучше!
     */


    /* Тернарные операторы
     Для ленивых придумали тернарные операторы. 
     Это по сути запись if и else в строчку.
     Вот его структура - 
     <тип данных> <название переменной> = <условие> ? <возврат значения если условие верно> : <возврат значения если условие неверно>;
     
     Нужны, когда у нас простое условие, которое что-то запишет в переменную.
     Можно вообразить то пример с else if, но лучше сделаю это в коне, чтобы было понятнее.
     */


    internal static class SecondLesson
    {
        public static void Main()
        {
            // Давай в коде решим тестовую задачу, чтобы закрепить теорию

            // Задача - 
            // Пользователь вводит два числа. Вывести их отношения к друг-другу. (больше/меньше/равно)

            // Решение - 
            int a = Convert.ToInt32(Console.ReadLine()); // Вместо Parse можно использовать функции из класса Convert
            int b = Convert.ToInt32(Console.ReadLine());

            if (a > b)
            {
                Console.WriteLine("A больше чем B");
            }
            else if (b > a) 
            {
                Console.WriteLine("B больше чем A");
            }
            else
            {
                Console.WriteLine("A и B равны");
            }

            // Боле неудобным образом, который мы разбирали это выглядело бы так -
            if (a > b)
            {
                Console.WriteLine("A больше чем B");
            }
            else
            {
                if (b > a)
                {
                    Console.WriteLine("B больше чем A");
                }
                else
                {
                    Console.WriteLine("A и B равны");
                }
            }

            // Ну и с тернарным оператором

            Console.WriteLine( a > b ? "A больше чем B" : b > a ? "B больше чем A" : "A и B равны");
        }

        /* Задачи
            Пользователь вводит возраст, если больше или равно 18, то пропускаем, иначе нет. (+тернарный)
            Пользователь вводит число, если оно чётное, то пропускаем, иначе нет. (+тернарный)
            Пользователь вводит число, если оно кратно 5, проверяем на кратность 3, если нет, то пропускаем. (+тернарный)
            Пользователь вводит число, если чётно, то пропускаем, иначе проверяем на кратность 3. (+тернарный)
    

            Дано число. Если оно от -10 до 10 не включительно, то увеличить его на 5, иначе уменьшить на 10. (+тернарный)
            Пользователь вводит три числа. Если все числа больше 10 и первые два числа делятся на 3, то вывести yes, иначе no. 
            Дано четыре числа, если первые два числа больше 5, третье число делится на 6, четвертое число не делится на 3, то вывести yes, иначе no.
            
            Дано три числа. Найти количество положительных чисел среди них.
            Дана дата из трех чисел (день, месяц и год). Вывести yes, если такая дата существует (например, 12 02 1999 - yes, 22 13 2001 - no). Считать, что в феврале всегда 28 дней.
         
            Даны действительные положительные числа a, b, с. По трем сторонам с длинами а, Ь, с можно построить треугольник. Найти углы треугольника.
            Дано трехзначное число. Переставьте первую и последнюю цифры.
            Пользователь вводит целое число. Проверьте является ли это число четырехзначным, если является, то выведите строку "Успешно", иначе "Неудача". (+тернарный)


            Итоговое задание - написать свой калькулятор. Подумать, как можно добавить тернарный оператор
         */
    }
}
