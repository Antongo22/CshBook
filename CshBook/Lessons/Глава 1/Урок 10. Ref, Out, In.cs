using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CshBook.Lessons
{
    /* Ref, Out, In - передача параметров по ссылке

       В C# параметры в методы обычно передаются по значению. Это означает, что метод работает с копией данных,
       и изменения, внесённые в параметры, не влияют на исходные переменные. Однако, иногда требуется,
       чтобы метод мог изменять значения переданных переменных. Для этого используются ключевые слова ref, out и in.

       Разница между ref, out и in:
       - ref: Параметр передаётся по ссылке, и метод может как читать, так и изменять его значение.
       - out: Параметр передаётся по ссылке, но метод обязан присвоить ему значение перед выходом.
       - in: Параметр передаётся по ссылке, но метод не может изменять его значение (только читать).

       Эти ключевые слова работают как со значимыми типами (int, double, struct и т.д.), так и со ссылочными (классы, массивы).
       Однако, для ссылочных типов ref, out и in влияют на саму ссылку, а не на объект, на который она указывает.
    */

    /* Теория о поведении ссылочных типов с ключевыми словами и без
    Без ключевых слов
    Когда ссылочный тип (например, массив или объект класса) передаётся в метод без ключевых слов, передаётся копия ссылки на объект. Это означает, что:
        -Метод может изменять состояние объекта (например, изменять элементы массива или поля объекта).
        -Метод не может изменить саму ссылку, то есть присвоить ей новый объект. Если метод попытается создать новый объект и присвоить его ссылке, это не повлияет на исходную ссылку.

    public static void ModifyArrayWithoutKeyword(int[] array)
    {
        array[0] = 100; // Изменяем элемент массива
        array = new int[] { 10, 20, 30 }; // Это не повлияет на исходный массив
    }


    С ключевым словом ref
    Когда ссылочный тип передаётся с ключевым словом ref, передаётся сама ссылка, а не её копия. Это позволяет:
        -Изменять состояние объекта.
        Изменять саму ссылку, то есть присваивать ей новый объект. Это повлияет на исходную ссылку.

    public static void ModifyArrayWithRef(ref int[] array)
    {
        array[0] = 100; // Изменяем элемент массива
        array = new int[] { 10, 20, 30 }; // Изменяем саму ссылку
    }


    С ключевым словом out
    Ключевое слово out похоже на ref, но используется для передачи ссылки, которая должна быть инициализирована внутри метода. 
    Это полезно, когда метод должен вернуть несколько значений.

    public static void InitializeArrayWithOut(out int[] array)
    {
        array = new int[] { 10, 20, 30 }; // Обязательно присваиваем новую ссылку
    }


    С ключевым словом in
    Ключевое слово in передаёт ссылку, но запрещает её изменение. 
    Это полезно для передачи больших структур данных без копирования, но с гарантией, что данные не будут изменены.

    public static void ReadArrayWithIn(in int[] array)
    {
        Console.WriteLine(array[0]); // Только читаем элемент массива
        // array[0] = 100; // Ошибка: нельзя изменить значение
    }
     */


    /* Разница между значимыми и ссылочными типами
     Значимые типы (value types):
        -Передаются по значению, если не используются ключевые слова ref, out, in.
        -При передаче по значению создаётся копия данных.
        -Ключевые слова ref, out, in позволяют передавать значимые типы по ссылке, что позволяет изменять исходные данные.


    Ссылочные типы (reference types)
        -Передаются по значению, но значение — это ссылка на объект.
        -Метод может изменять состояние объекта, но не саму ссылку (без ключевых слов).
        -Ключевые слова ref, out, in позволяют изменять саму ссылку, а не только объект, на который она указывает.

     */


    internal static class TenthLesson
    {
        /* Пример с ref */
        public static void ModifyWithRef(ref int x)
        {
            x += 10; // Изменяем значение переданной переменной
        }

        /* Пример с out */
        public static void InitializeWithOut(out int y)
        {
            y = 42; // Обязательно присваиваем значение
        }

        /* Пример с in */
        public static void ReadWithIn(in int z)
        {
            Console.WriteLine(z); // Только читаем значение
            // z = 10; // Ошибка: нельзя изменить значение
        }

        /* Пример с ссылочными типами без ключевых слов */
        public static void ModifyArrayWithoutKeyword(int[] array)
        {
            array[0] = 100; // Изменяем элемент массива
            array = new int[] { 10, 20, 30 }; // Создаём новый массив, но это не повлияет на исходный массив
        }

        /* Пример с ссылочными типами с ref */
        public static void ModifyArrayWithRef(ref int[] array)
        {
            array[0] = 100; // Изменяем элемент массива
            array = new int[] { 10, 20, 30 }; // Изменяем саму ссылку на массив
        }

        /* Пример с ссылочными типами с out */
        public static void InitializeArrayWithOut(out int[] array)
        {
            array = new int[] { 10, 20, 30 }; // Обязательно присваиваем новую ссылку
        }

        /* Пример с ссылочными типами с in */
        public static void ReadArrayWithIn(in int[] array)
        {
            Console.WriteLine(array[0]); // Только читаем элемент массива
            // array[0] = 100; // Ошибка: нельзя изменить значение
        }

        public static void Main_()
        {
            // Пример с ref
            int a = 5;
            ModifyWithRef(ref a);
            Console.WriteLine($"После ref: {a}"); // Вывод: 15

            // Пример с out
            int b;
            InitializeWithOut(out b);
            Console.WriteLine($"После out: {b}"); // Вывод: 42

            // Пример с in
            int c = 100;
            ReadWithIn(in c);
            Console.WriteLine($"После in: {c}"); // Вывод: 100

            // Пример с ссылочными типами без ключевых слов
            int[] arr1 = { 1, 2, 3 };
            ModifyArrayWithoutKeyword(arr1);
            Console.WriteLine($"После ModifyArrayWithoutKeyword: {string.Join(", ", arr1)}"); // Вывод: 100, 2, 3

            // Пример с ссылочными типами с ref
            int[] arr2 = { 1, 2, 3 };
            ModifyArrayWithRef(ref arr2);
            Console.WriteLine($"После ModifyArrayWithRef: {string.Join(", ", arr2)}"); // Вывод: 10, 20, 30

            // Пример с ссылочными типами с out
            int[] arr3;
            InitializeArrayWithOut(out arr3);
            Console.WriteLine($"После InitializeArrayWithOut: {string.Join(", ", arr3)}"); // Вывод: 10, 20, 30

            // Пример с ссылочными типами с in
            int[] arr4 = { 1, 2, 3 };
            ReadArrayWithIn(in arr4);
            Console.WriteLine($"После ReadArrayWithIn: {string.Join(", ", arr4)}"); // Вывод: 1, 2, 3
        }
    }
}

/* Задачи для ref 

1. Обмен значений:
   Напишите функцию, которая принимает два числа по ссылке (ref) и меняет их значения местами.

2. Увеличение на процент:
   Напишите функцию, которая принимает число и процент по ссылке (ref), и увеличивает число на указанный процент.

3. Сумма элементов массива:
   Напишите функцию, которая принимает массив и переменную для суммы по ссылке (ref), и записывает сумму элементов массива в эту переменную.

4. Поиск максимального элемента:
   Напишите функцию, которая принимает массив и переменную для максимального элемента по ссылке (ref), и записывает в неё максимальный элемент массива.

5. Обнуление массива:
   Напишите функцию, которая принимает массив по ссылке (ref) и обнуляет все его элементы.
*/

/* Задачи для out 

1. Инициализация массива:
   Напишите функцию, которая принимает размер массива и переменную для массива по ссылке (out), и создаёт массив указанного размера.

2. Разделение строки:
   Напишите функцию, которая принимает строку и две переменные по ссылке (out), и разделяет строку на две части по первому пробелу.

3. Поиск минимального элемента:
   Напишите функцию, которая принимает массив и переменную для минимального элемента по ссылке (out), и записывает в неё минимальный элемент массива.

4. Генерация случайного числа:
   Напишите функцию, которая принимает диапазон и переменную для случайного числа по ссылке (out), и генерирует случайное число в указанном диапазоне.

5. Парсинг числа:
   Напишите функцию, которая принимает строку и переменную для числа по ссылке (out), и пытается преобразовать строку в число. Если преобразование удалось, записывает результат в переменную.
*/

/* Задачи для in 

1. Вывод массива:
   Напишите функцию, которая принимает массив по ссылке (in) и выводит его элементы на экран.

2. Подсчёт суммы элементов:
   Напишите функцию, которая принимает массив по ссылке (in) и возвращает сумму его элементов.

3. Проверка на отсортированность:
   Напишите функцию, которая принимает массив по ссылке (in) и возвращает true, если массив отсортирован по возрастанию, и false в противном случае.

4. Поиск элемента:
   Напишите функцию, которая принимает массив и число по ссылке (in), и возвращает true, если число есть в массиве, и false в противном случае.

5. Подсчёт гласных в строке:
   Напишите функцию, которая принимает строку по ссылке (in) и возвращает количество гласных букв в ней.
*/
