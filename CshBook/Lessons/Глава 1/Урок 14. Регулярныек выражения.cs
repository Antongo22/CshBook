using System;
using System.Text.RegularExpressions;

namespace CshBook.Lessons
{
    /* Урок 14: Регулярные выражения в C#
     
       Регулярные выражения (Regex) – это мощный инструмент для поиска, проверки и замены строк по определённым шаблонам. 
       В C# они реализованы с помощью класса Regex из пространства имен System.Text.RegularExpressions.
       
       Регулярные выражения позволяют:
       - Проверять, соответствует ли строка определённому формату (например, номер телефона, email).
       - Извлекать части строки по шаблону.
       - Заменять части строки по заданному паттерну.
    */

    /* Основные символы регулярных выражений:
        .  - Любой один символ, кроме новой строки.
        ^  - Начало строки.
        $  - Конец строки.
        \d - Любая цифра (0-9).
        \D - Любой символ, кроме цифры.
        \w - Любая буква, цифра или знак подчёркивания (_).
        \W - Любой символ, кроме буквы, цифры или знака подчёркивания.
        \s - Любой пробельный символ (пробел, табуляция, перенос строки).
        \S - Любой символ, кроме пробельного.
        \b - Граница слова.
        \B - Не граница слова.
        +  - Один или более раз.
        *  - Ноль или более раз.
        ?  - Ноль или один раз.
        {n}  - Ровно n повторений.
        {n,} - Не менее n повторений.
        {n,m} - От n до m повторений.
        |  - Альтернатива (логическое "ИЛИ"), например: "cat|dog" — ищет "cat" или "dog".
        () - Группировка выражения.
        [] - Символьный класс (набор символов), например, [abc] — любой из символов "a", "b" или "c".
        [^] - Отрицание внутри класса, например, [^abc] — любой символ, кроме "a", "b" или "c".
        \  - Экранирование специальных символов (например, `\.` ищет именно точку, а не "любой символ").
    */


    /* Примеры регулярных выражений:
       - "^\d{3}$"   — проверяет, состоит ли строка ровно из трёх цифр.
       - "^[\w.-]+@[\w.-]+\.\w{2,}$" — проверяет, является ли строка email-адресом.
       - "(\d{2})-(\d{2})-(\d{4})" — находит дату в формате "dd-mm-yyyy".
    */

    internal static class FourteenthLesson
    {
        public static void Main()
        {
            Console.WriteLine("Введите email:");
            string input = Console.ReadLine();

            // Проверка email
            string pattern = @"^[\w.-]+@[\w.-]+\.\w{2,}$";
            bool isValid = Regex.IsMatch(input, pattern);
            Console.WriteLine(isValid ? "Корректный email" : "Некорректный email");

            Console.WriteLine("\nВведите строку с числами:");
            string text = Console.ReadLine();

            // Поиск всех чисел в строке
            MatchCollection matches = Regex.Matches(text, @"\d+");
            Console.WriteLine("Найденные числа:");
            foreach (Match match in matches)
            {
                Console.WriteLine(match.Value);
            }

            Console.WriteLine("\nПримеры с разными символами:");
            string sampleText = "hello 123 world_ 456 end.";

            // Тестирование различных регулярных выражений
            TestRegex(@".", sampleText, "Любой символ, кроме новой строки (.)");
            // Выведет: все символы по одному, кроме пробелов

            TestRegex(@"\d", sampleText, "Любая цифра (\\d)");
            // Выведет: 1, 2, 3, 4, 5, 6

            TestRegex(@"\w", sampleText, "Любая буква, цифра или _ (\\w)");
            // Выведет: h, e, l, l, o, 1, 2, 3, w, o, r, l, d, _, 4, 5, 6, e, n, d

            TestRegex(@"\s", sampleText, "Любой пробел (\\s)");
            // Выведет: пробелы между словами и числами

            TestRegex(@"\bworld\b", sampleText, "Граница слова (\\b)");
            // Выведет: world (но НЕ world_)

            TestRegex(@"^hello", sampleText, "Начало строки (^)");
            // Выведет: hello (только если в начале строки)

            TestRegex(@"end\.$", sampleText, "Конец строки ($)");
            // Выведет: end. (только если в конце строки)

            TestRegex(@"\d+", sampleText, "Один или более раз (+)");
            // Выведет: 123, 456

            TestRegex(@"\w{3,5}", sampleText, "От 3 до 5 символов подряд ({n,m})");
            // Выведет: hello, 123, world, 456, end
        }

        public static void TestRegex(string pattern, string text, string description)
        {
            Console.WriteLine($"\n{description}:");
            MatchCollection matches = Regex.Matches(text, pattern);
            foreach (Match match in matches)
            {
                Console.WriteLine($"Найдено: {match.Value}");
            }
        }
    }
}

/* Задачи:

1. Проверить, является ли строка номером телефона в формате "+7(XXX)XXX-XX-XX".
2. Найти все слова в строке, начинающиеся с заглавной буквы.
3. Проверить, является ли строка корректным паролем (минимум 8 символов, хотя бы одна цифра и одна буква).
4. Найти в тексте все email-адреса.
5. Проверить, содержит ли строка дату в формате "dd-mm-yyyy".
6. Найти все ссылки (URL) в строке.
7. Проверить, является ли строка российским ИНН (10 или 12 цифр).

*/
