using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CshBook.Lessons
{
    /* Теория
    Мы уже умеем писать простую программу. 
    Однако, сейчас у неё только один путь выполнения. 
    Для того, чтобы реагировать по разному на разные данные в C# есть условные операторы.
    Для корректной работы нам нужен тип данных bool.

    Для условных операторов используются ключевые слова "if" и "else".
    Вот как выглядит конструкция -

    if (<bool (условие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else 
    {
        #Логика выполнения если условие равнялось false#
    }

    ВАЖНО!, что else относится только к последнему if, где else идёт сразу после него. 

    else является необязательной конструкцией, те мы можем сделать так - 

    if (<bool (условие1)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    if (<bool (условие2)>)
    {
        #Логика выполнения если условие равнялось true#
    }

    и может быть такое, что выполниться только одно из if, или оба, или вообще не одно
    

    Для того, чтобы связать несколько if с одним else есть такая конструкция:

    if (<bool (условие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else 
    {
         if (<bool (ПОДусловие)>)
        {
            #Логика выполнения если условие равнялось true#
        }
        else 
        {
             if (<bool (ПОДПОДусловие)>)
            {
                #Логика выполнения если условие равнялось true#
            }
            else 
            {
                #Логика выполнения если условие равнялось false#
            }
        }
    }

    неудобно, поэтому можно совместить else и if для более удобной записи. Вот пример, логически аналогичный прошлому - 
    
    if (<bool (условие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else if (<bool (ПОДусловие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else if (<bool (ПОДПОДусловие)>)
    {
        #Логика выполнения если условие равнялось true#
    }
    else 
    {
        #Логика выполнения если условие равнялось false#
    }    
    
    Так намного лучше!
     */


    /* Тернарные операторы
     Для ленивых придумали тернарные операторы. 
     Это по сути запись if и else в строчку.
     
     
     */


    internal static class SecondLesson
    {
        public static void Main()
        {
            // Давай в коде решим тестовую задачу, чтобы закрепить теорию

            // Задача - 
            // Пользователь вводит два числа. Вывести их отношения к друг-другу. (больше/меньше/равно)

            // Решение - 
            int a = Convert.ToInt32(Console.ReadLine()); // Вместо Parse можно использовать функции из класса Convert
            int b = Convert.ToInt32(Console.ReadLine());

            if (a > b)
            {
                Console.WriteLine("A больше чем B");
            }
            else if (b > a) 
            {
                Console.WriteLine("B больше чем A");
            }
            else
            {
                Console.WriteLine("A и B равны");
            }

            // Боле неудобным образом, который мы разбирали это выглядело бы так -
            if (a > b)
            {
                Console.WriteLine("A больше чем B");
            }
            else
            {
                if (b > a)
                {
                    Console.WriteLine("B больше чем A");
                }
                else
                {
                    Console.WriteLine("A и B равны");
                }
            }      
        }
    }
}
